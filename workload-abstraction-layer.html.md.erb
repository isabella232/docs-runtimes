---
title: Choosing the Right Abstraction Layer for Your Workload 
owner: PCF Documentation
---

<strong><%= modified_date %></strong>

This topic provides guidelines for determining the best abstraction layer for your workload 
in Pivotal Cloud Foundry (PCF).

<p class="note"><strong>Note</strong>: This topic provides recommendations based on 
common patterns observed by Pivotal architects. In order to choose the best abstraction layer for your workload, 
consider all the situational requirements of your organization.</p> 

## <a id="runtime-abstration-levels"></a> Abstraction Layers

As a general guideline, when choosing where to place your workload,
use a runtime that exists at the highest abstraction layer possible. 

Place as many workloads as technically feasible at the top of the platform hierarchy.

<img src="images/abstraction-layers.png" alt="Illustration of abstraction layers in PCF">
<%#= https://docs.google.com/drawings/d/1iZ7AUu9W0oSGt-ev6vWaAt-ZUwsRNdUP7Zb2_XKuCLw/edit %> 

The higher you go, the more you delegate to the platform in terms of managing aspects 
like container image life cycle.
As a result, developers can focus on solving business problems.

The lower you go, the more flexibility you gain in controlling different aspects 
of containers and how applications are deployed and run. 
However, this flexibility comes at the expense of having to manage more things, 
such as managing the security and lifecycle of container images end-to-end and 
the configuration of how those containers need to run in Kubernetes.

### <a id="runtimes-per-layer"></a> Runtimes in PCF

PCF offers different runtimes to run your workloads. 
Each of these runtimes represent an implementation of the above abstraction layers.

<table>
  <tr>
  <th>Abstraction Layer </th>
  <th>Corresponding Runtimes in PCF</th>
  </tr>
  <tr>
  	<td>
    Serverless Functions
    </td>
    <td>Pivotal Function Service (PFS) <sup>*</sup></td>
  </tr>
  <tr>
    <td>
    Application Platform
    </td>
    <td>
     Pivotal Application Service (PAS),<br/> Pivotal Application Service (PAS) for Windows, <br/> PCF Isolation Segment
    </td>
  </tr>
  <tr>
    <td>
    Container Orchestrator
   </td>
   <td>
   	Pivotal Container Service (PKS)
   </td>
  </tr>
</table>

<sup>*</sup> At time of publication, PFS is an alpha release and available only through early access. For more information about PFS, see <a href="https://docs.pivotal.io/pfs">Pivotal Function Service (PFS) documentation</a>.

## <a id="use-cases"></a> Common Workload Use Cases

This section describes typical workloads that are best suited for the different runtimes in PCF.

<table>
<tr bgcolor="#F8F8F8">
	<td width="300px"><b>Workload</b></td>
	<td align="center"><b>PAS</b></td>
  <td align="center"><b>PKS</b></td>
</tr>
<tr> 
    <td>Stateful</td>
    <td> </td>
    <td align="center"> ✅  </td>
</tr>
<tr> 
    <td>Stateless</td>
    <td align="center"> ✅ </td>
    <td>  </td>
</tr>
<tr> 
    <td>Commercial or "off-the-shelf" software</td>
    <td> </td>
    <td align="center"> ✅ </td>
</tr>
<tr> 
    <td>Custom-built green field software targeting Windows or Linux</td>
    <td align="center"> ✅ </td>
    <td> </td>
</tr>
<tr> 
    <td>Software distributed via Helm charts</td>
    <td> </td>
    <td align="center"> ✅ </td>
</tr>
<tr> 
    <td>Legacy, zero-factor apps</td>
    <td> </td>
    <td align="center"> ✅ </td>
</tr>
<tr>
	<td>Web apps</td>
    <td align="center"> ✅ </td>
    <td> </td>
</tr>
<tr>
	<td>Batch jobs</td>
    <td align="center"> ✅ </td>
    <td> </td>
</tr>
<tr>
	<td>Streaming apps</td>
    <td align="center"> ✅ </td>
    <td> </td>
</tr>		 
</table>

### <a id="pks-workloads"></a> PKS Examples

Some specific examples of PKS workloads include:

* MongoDB, PostgreSQL, Cassandra, Spark, Elastic Search
* Microsoft SQL Server
* Apache Kafka
* Custom-built C++ app
* Legacy Java-based zero factor monolith apps

### <a id="pas-workloads"></a> PAS Examples

Some specific examples of PAS workloads include:

* HTTP-based microservices built with Spring Boot
* Partner-oriented API built with .NET Core
* Legacy web-app built with .NET 4.x
* Customer-facing web app built with Node.js
* Data pipeline built with Spring Boot and TCP routing


## <a id="add-factorss"></a> Additional Factors to Consider

In addition to the technical characteristics of your workloads listed in [Common Workload Use Cases](#use-cases),
evaluate other factors such as the current value of the application, the frequency of changes, and 
the skills on your team.

The following sections list considerations to help you 
decide which abstraction layer best suits your workload.

These considerations are intended only as guiding prompts and should be reviewed 
with your particular business needs and use cases in mind. 

### <a id="value-considerations"></a> Value and Release Cycle Considerations

In the area of value and release cycles of your workload, consider the following:

* What is the current release cycle for the workload? Does it release daily, monthly, quarterly, bi-annually, or longer?
* What is the desired or target release cycle for this workload? 
* Does this workload depend on a vendor lifecycle?

An application platform like PAS offers higher developer productivity guarantees.
Therefore, placing your workload on the application platform layer can enable teams to go 
faster and allow for those frequent release cycles.

Applications that are owned by a vendor are tied to the vendor's lifecycle.
Therefore, it may not be possible to update them very frequently such as on daily or weekly basis.

Applications that are considered low value and will be retired soon
do not need to be updated on a frequent basis.

### <a id="skills-consideration"></a> Team Skill Considerations

Team skills matter when choosing a technology because available skills can accelerate 
or slow down the adoption of any solution. 

Workload architecture decisions should be made in alignment with the in-house skills of an organization.

Each abstraction layers expose different technologies to your development and platform teams. 
Understanding the team skills can help inform the decision on which runtime to choose for each scenario.

On your development team, consider the following:

* What languages and frameworks is the team currently using? For example, Spring, Java, .NET, Go.
* What CI/CD tooling are they familiar with? For example, Concourse, Jenkins and so on.
* Do they currently use containers like Docker?

On your platform team, consider the following:

* Are they skilled in traditional middleware? For example, WebLogic, WebSphere, JBoss, ESB and so on.
* What platforms are they used to managing? For example, Kubernetes, PCF, Docker Swarm, GKE.
* What type of on-premise infrastructure skills do they possess? For example, vSphere, vSAN, HCI.

### <a id="workload_combinations"></a> Example Combinations

The following table lists some example combinations based on the workload use cases and factors listed above.

<table>
 <tr>
  <th>
    Workload Type
  </th>
  <th> 
    Value and Release Cycle
  </th>
  <th>
     Team Skills
  </th>
  <th>
     Runtime Recommendation
  </th>
</tr>

<tr>
  <td>
Data Services, COTS distributed as container
  </td>
  <td>
  High value, tied to vendor release cycle.
  </td>
  <td>
  Traditional infrastructure skills, but becoming Kubernetes savvy.
  </td>
  <td>
  PKS
  </td>
</tr>

<tr>
  <td>
    Green field, Spring Boot Microservices
  </td>
  <td>
    High value, fast-paced releases
  </td>
  <td>
    Pure development and CI/CD skills
  </td>
  <td>
    PAS
  </td>
</tr>

<tr>
  <td>
    Green field, Spring Boot Microservices
  </td>
  <td>
    High value, fast-paced releases
  </td>
  <td>
    - Pure development and CI/CD skills<br/>
    - Devs build containers<br/>
    - Platform team savvy in Kubernetes, Docker and GKE
  </td>
  <td>
    PAS or PKS
  </td>
</tr>

<tr>
  <td>
  .NET legacy
  </td>
  <td>
  Currently low, but becoming high value. <br/>Moving to faster-paced releases.
  </td>
  <td>
  .NET development skills
  </td>
  <td>
  PAS
  </td>
</tr>

<tr>
  <td>
    Java legacy
  </td> 
  <td>Low value app, but becoming high value.<br/>
  Moving to faster-paced releases.
  </td>
  <td>- Pure development and CI/CD skills<br/>
    - Devs build containers<br/>
    - Platform team savvy in traditional middleware<br/>
    - Platform team is building Kubernetes, Docker and GKE skills
  </td>
  <td>
  Combination of PAS and PKS.<br/> 
  Start on PKS, modernize, and then add PAS.
  </td>
</tr>
</table>

